---
title: "SSH, Git and Github"

subtitle: "Basic commands HPC Launch https://hds-sandbox.github.
io/HPC-lab/"
author: 
    - "Alba Refoyo"
    - "Jennifer Bartell"
date: last-modified
format: 
  revealjs:
    slide-number: true
    chalkboard: true
    css: styles.css
    controls: true
toc: false
code-line-numbers: false
logo: ../../img/logo.png
---

## Generate SSH Key Pair

Navigate to the location where all SSH keys are stored to generate a new one (**skip** these first two commands if you haven't used SSH keys before). 

```{.bash filename="Mac/Linux"}
cd ~/.ssh 
```
&#32;
```{.bash filename="Windows"}
cd C:\Users\<YourUsername>\.ssh
```

We will specify the type of key to create with the option `-t` (default) and use a filename that describes what the key is for (e.g. `id_UCloud`), and don't enter a passphrase:

```{.bash}
ssh-keygen -t ed25519 
```

```
Generating public/private ed25519 key pair.
Enter file in which to save the key (/Users/gsd818/.ssh/id_ed25519): id_UCloud
Your identification has been saved in id_UCloud
Your public key has been saved in id_UCloud.pub
...
```

---

## Windows users (skip otherwise)

```{.bash filename="On Powershell"}
# By default the ssh-agent service is disabled. Configure it to start automatically.
# Make sure you're running as an Administrator.
Get-Service ssh-agent | Set-Service -StartupType Automatic

# Start the service
Start-Service ssh-agent

# This should return a status of Running
Get-Service ssh-agent
```
&#32;

```{.bash filename="On WSL"}
eval `ssh-agent -s`
```

&#32;
On MombaXterm, follow the instructions [here](https://servicedesk.surf.nl/wiki/spaces/WIKI/pages/37388673/Creating+and+using+an+SSH+key+pair+with+MobaXterm).
---

Once, we have generated your SSH keys, add the key to your system:

```{.bash}
## Now load your key files into ssh-agent
ssh-add id_UCloud
```

Do you get a message similar to this?

```
entity added: id_UCloud (gsd818@SUN1029429)
```

Then, copy the public key, either using `cat` to print the content of the file or as follows:

```{.bash}
cat id_UCloud.pub | pbcopy 
```

---

You can now paste the public SSH key on UCloud. You'll need to enable SSH access when you submit a job so you can SSH in. 

![](../../develop/images/sshkey_step2.png)

---

Submit a new job on UCloud and configure SSH access
![](./img/enableSSH.png){width="800" height="150"}

Once the job starts, the SSH command appears in the progress view and can be run locally from your terminal
![](./img/sshCommand.png){width="900" height=320"}


## Connecting GitHub with UCloud

Create a new GitHub 
account if you don't have one yet. Then, go to repositories and create a new one (e.g. SandboxIntro). Alternatively, you can also fork one of our repositories or if you already have one feel free to use that instead. 

![](./img/github_repo.png)

---

Now, we need to create a **token classic** (for general use). Go to your profile and on the right-side menu select:

`Settings > Developer settings (at the bottom) > Personal access tokens > Tokens (classic) > Generate new token (classic)`. 

- Note: `git commit UCloud` 
- Select scope: âœ… repo (top option) 
- Do not set a expiration date

Please, remember to **save** the generated token somewhere locally and safe. You won't be able to see/copy it again. 

**Use the token as your password** when performing Git operations like push or commit from the HPC.

---

Then, we will generate SSH key on UCloud following these steps

  1. Submit a new job using the Terminal app and mount your personal drive
  2. Change directory to your personal drive (e.g. `cd /work/myNameXXX/`)
  3. Create a new folder named `ssh`, where you will store your new SSH keys
  4. Generate a new key (no need for paraphrase) and save it as e.g. `id_repo1`
  ```{.bash}
  ssh-keygen -t ed25519
  ```
  5. Copy the public key (e.g. `id_repo1.pub`)
  6. Add the key to the repository you have created or forked from us on GitHub:
  `YOUR-REPO > Settings > Deploy keys > Add deploy key`. The new deploy key can be named as e.g. `UCloud-repo1`

---

Finally, to streamline pushing changes...

  7. Modify/Create the initialization bash script to include this code

  ```{.bash filename="setup.sh"}
  eval `ssh-agent -s`
  ssh-add /work/ssh/id_repo1
  git config --global user.name "add here your name"
  git config --global user.email "add here your email"
  bash -i 
  ```

You can now git commit and push using the token as password to save all changes to your repository. Let's give it a try!

---

Submit a new job on UCloud. Do not forget to mount your personal drive and use the initialization bash script you just created. Once, the job is running, change directory to your personal drive, and clone your repository. 

```{.bash filename="Example repo"}
git clone <https://github.
com/hds-sandbox/cookiecutter-template>
```

Now, modify or create a new file in your repository. This is a test to understand how to push changes to GitHub.


```{.bash}
git add . 
git commit -m "added new file"
git push 
```

You will be asked to enter your GitHub 
username and the password. When you work from HPCs, you need to enter the token as your password. 

Go to GitHub 
and check if those changes are now visible. 

